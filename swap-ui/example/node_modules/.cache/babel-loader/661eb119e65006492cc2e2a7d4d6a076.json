{"ast":null,"code":"var _jsxFileName = \"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/src/index.tsx\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport { createMuiTheme, ThemeProvider } from \"@material-ui/core/styles\";\nimport { SwapContextProvider, useSwapContext, useSwapFair } from \"./context/Swap\";\nimport { DexContextProvider, useBbo, useFairRoute, useMarketName } from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, { ArrowButton, SwapButton, SwapHeader, SwapTokenForm } from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Swap(props) {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral\n  } = props; // @ts-ignore\n\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createMuiTheme(materialTheme || {\n    palette: {\n      primary: {\n        main: \"#2196F3\",\n        contrastText: \"#FFFFFF\"\n      },\n      secondary: {\n        main: \"#E0E0E0\",\n        light: \"#595959\"\n      },\n      error: {\n        main: \"#ff6b6b\"\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme,\n    children: /*#__PURE__*/_jsxDEV(TokenListContextProvider, {\n      tokenList: tokenList,\n      children: /*#__PURE__*/_jsxDEV(TokenContextProvider, {\n        provider: provider,\n        children: /*#__PURE__*/_jsxDEV(DexContextProvider, {\n          swapClient: swapClient,\n          children: /*#__PURE__*/_jsxDEV(SwapContextProvider, {\n            fromMint: fromMint,\n            toMint: toMint,\n            fromAmount: fromAmount,\n            toAmount: toAmount,\n            referral: referral,\n            children: /*#__PURE__*/_jsxDEV(SwapCard, {\n              containerStyle: containerStyle,\n              contentStyle: contentStyle,\n              swapTokenContainerStyle: swapTokenContainerStyle\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n/**\n * Properties for the `Swap` Component.\n */\n\n_c = Swap;\nexport { // Components.\nSwap, SwapCard, SwapHeader, SwapTokenForm, ArrowButton, SwapButton, TokenDialog, // Providers and context.\n// Swap.\nSwapContextProvider, useSwapContext, useSwapFair, // TokenList.\nTokenListContextProvider, useTokenMap, // Token.\nTokenContextProvider, useMint, // Dex.\nDexContextProvider, useFairRoute, useMarketName, useBbo };\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/selasie/Documents/GitHub/dex_ui/swap-ui/src/index.tsx"],"names":["Swap","SwapClient","createMuiTheme","ThemeProvider","SwapContextProvider","useSwapContext","useSwapFair","DexContextProvider","useBbo","useFairRoute","useMarketName","TokenListContextProvider","useTokenMap","TokenContextProvider","useMint","SwapCard","ArrowButton","SwapButton","SwapHeader","SwapTokenForm","TokenDialog","props","containerStyle","contentStyle","swapTokenContainerStyle","materialTheme","provider","tokenList","fromMint","toMint","fromAmount","toAmount","referral","swapClient","theme","palette","primary","main","contrastText","secondary","light","error"],"mappings":";AAIA,SAASA,IAAI,IAAIC,UAAjB,QAAmC,qBAAnC;AACA,SACEC,cADF,EAGEC,aAHF,QAIO,0BAJP;AAKA,SACEC,mBADF,EAEEC,cAFF,EAGEC,WAHF,QAIO,gBAJP;AAKA,SACEC,kBADF,EAEEC,MAFF,EAGEC,YAHF,EAIEC,aAJF,QAKO,eALP;AAMA,SAASC,wBAAT,EAAmCC,WAAnC,QAAsD,qBAAtD;AACA,SAASC,oBAAT,EAA+BC,OAA/B,QAA8C,iBAA9C;AACA,OAAOC,QAAP,IACEC,WADF,EAEEC,UAFF,EAGEC,UAHF,EAIEC,aAJF,QAKO,mBALP;AAMA,OAAOC,WAAP,MAAwB,0BAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASpB,IAAT,CAAcqB,KAAd,EAA8C;AAC3D,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,YAFI;AAGJC,IAAAA,uBAHI;AAIJC,IAAAA,aAJI;AAKJC,IAAAA,QALI;AAMJC,IAAAA,SANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA,MARI;AASJC,IAAAA,UATI;AAUJC,IAAAA,QAVI;AAWJC,IAAAA;AAXI,MAYFX,KAZJ,CAD2D,CAe3D;;AACA,QAAMY,UAAU,GAAG,IAAIhC,UAAJ,CAAeyB,QAAf,EAAyBC,SAAzB,CAAnB;AACA,QAAMO,KAAK,GAAGhC,cAAc,CAC1BuB,aAAa,IAAI;AACfU,IAAAA,OAAO,EAAE;AACPC,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE,SADC;AAEPC,QAAAA,YAAY,EAAE;AAFP,OADF;AAKPC,MAAAA,SAAS,EAAE;AACTF,QAAAA,IAAI,EAAE,SADG;AAETG,QAAAA,KAAK,EAAE;AAFE,OALJ;AASPC,MAAAA,KAAK,EAAE;AACLJ,QAAAA,IAAI,EAAE;AADD;AATA;AADM,GADS,CAA5B;AAiBA,sBACE,QAAC,aAAD;AAAe,IAAA,KAAK,EAAEH,KAAtB;AAAA,2BACE,QAAC,wBAAD;AAA0B,MAAA,SAAS,EAAEP,SAArC;AAAA,6BACE,QAAC,oBAAD;AAAsB,QAAA,QAAQ,EAAED,QAAhC;AAAA,+BACE,QAAC,kBAAD;AAAoB,UAAA,UAAU,EAAEO,UAAhC;AAAA,iCACE,QAAC,mBAAD;AACE,YAAA,QAAQ,EAAEL,QADZ;AAEE,YAAA,MAAM,EAAEC,MAFV;AAGE,YAAA,UAAU,EAAEC,UAHd;AAIE,YAAA,QAAQ,EAAEC,QAJZ;AAKE,YAAA,QAAQ,EAAEC,QALZ;AAAA,mCAOE,QAAC,QAAD;AACE,cAAA,cAAc,EAAEV,cADlB;AAEE,cAAA,YAAY,EAAEC,YAFhB;AAGE,cAAA,uBAAuB,EAAEC;AAH3B;AAAA;AAAA;AAAA;AAAA;AAPF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAuBD;AAED;AACA;AACA;;KA7DwBxB,I;AA6HxB,SACE;AACAA,IAFF,EAGEe,QAHF,EAIEG,UAJF,EAKEC,aALF,EAMEH,WANF,EAOEC,UAPF,EAQEG,WARF,EASE;AACA;AACAhB,mBAXF,EAYEC,cAZF,EAaEC,WAbF,EAcE;AACAK,wBAfF,EAgBEC,WAhBF,EAiBE;AACAC,oBAlBF,EAmBEC,OAnBF,EAoBE;AACAP,kBArBF,EAsBEE,YAtBF,EAuBEC,aAvBF,EAwBEF,MAxBF","sourcesContent":["import { ReactElement } from \"react\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { TokenListContainer } from \"@solana/spl-token-registry\";\nimport { Provider } from \"@project-serum/anchor\";\nimport { Swap as SwapClient } from \"@project-serum/swap\";\nimport {\n  createMuiTheme,\n  ThemeOptions,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport {\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n} from \"./context/Swap\";\nimport {\n  DexContextProvider,\n  useBbo,\n  useFairRoute,\n  useMarketName,\n} from \"./context/Dex\";\nimport { TokenListContextProvider, useTokenMap } from \"./context/TokenList\";\nimport { TokenContextProvider, useMint } from \"./context/Token\";\nimport SwapCard, {\n  ArrowButton,\n  SwapButton,\n  SwapHeader,\n  SwapTokenForm,\n} from \"./components/Swap\";\nimport TokenDialog from \"./components/TokenDialog\";\n\n/**\n * A`Swap` component that can be embedded into applications. To use,\n * one can, minimally, provide a provider and token list to the component.\n * For example,\n *\n * ```javascript\n * <Swap provider={provider} tokenList={tokenList} />\n * ```\n *\n * All of the complexity of communicating with the Serum DEX and managing\n * its data is handled internally by the component.\n *\n * For information on other properties like earning referrals, see the\n * [[SwapProps]] documentation.\n */\nexport default function Swap(props: SwapProps): ReactElement {\n  const {\n    containerStyle,\n    contentStyle,\n    swapTokenContainerStyle,\n    materialTheme,\n    provider,\n    tokenList,\n    fromMint,\n    toMint,\n    fromAmount,\n    toAmount,\n    referral,\n  } = props;\n\n  // @ts-ignore\n  const swapClient = new SwapClient(provider, tokenList);\n  const theme = createMuiTheme(\n    materialTheme || {\n      palette: {\n        primary: {\n          main: \"#2196F3\",\n          contrastText: \"#FFFFFF\",\n        },\n        secondary: {\n          main: \"#E0E0E0\",\n          light: \"#595959\",\n        },\n        error: {\n          main: \"#ff6b6b\",\n        },\n      },\n    }\n  );\n  return (\n    <ThemeProvider theme={theme}>\n      <TokenListContextProvider tokenList={tokenList}>\n        <TokenContextProvider provider={provider}>\n          <DexContextProvider swapClient={swapClient}>\n            <SwapContextProvider\n              fromMint={fromMint}\n              toMint={toMint}\n              fromAmount={fromAmount}\n              toAmount={toAmount}\n              referral={referral}\n            >\n              <SwapCard\n                containerStyle={containerStyle}\n                contentStyle={contentStyle}\n                swapTokenContainerStyle={swapTokenContainerStyle}\n              />\n            </SwapContextProvider>\n          </DexContextProvider>\n        </TokenContextProvider>\n      </TokenListContextProvider>\n    </ThemeProvider>\n  );\n}\n\n/**\n * Properties for the `Swap` Component.\n */\nexport type SwapProps = {\n  /**\n   * Wallet and network provider. Apps can use a `Provider` subclass to hook\n   * into all transactions intitiated by the component.\n   */\n  provider: Provider;\n\n  /**\n   * Token list providing information for tokens used.\n   */\n  tokenList: TokenListContainer;\n\n  /**\n   * Wallet address to which referral fees are sent (i.e. a SOL address).\n   * To receive referral fees, the wallet must *own* associated token\n   * accounts for the token in which the referral is paid  (usually USDC\n   * or USDT).\n   */\n  referral?: PublicKey;\n\n  /**\n   * The default `fromMint` to use when the component first renders.\n   */\n  fromMint?: PublicKey;\n\n  /**\n   * The default `toMint` to use when the component first renders.\n   */\n  toMint?: PublicKey;\n\n  /**\n   * The initial amount for the `fromMint` to use when the component first\n   * renders.\n   */\n  fromAmount?: number;\n\n  /**\n   * The initial amount for the `toMint` to use when the component first\n   * renders.\n   */\n  toAmount?: number;\n\n  /**\n   * Provide custom material-ui theme.\n   */\n  materialTheme?: ThemeOptions;\n\n  /**\n   * Styling properties for the main container.\n   */\n  containerStyle?: any;\n\n  /**\n   * Styling properties for the content container.\n   */\n  contentStyle?: any;\n\n  /**\n   * Styling properties for the from and to token containers.\n   */\n  swapTokenContainerStyle?: any;\n};\n\nexport {\n  // Components.\n  Swap,\n  SwapCard,\n  SwapHeader,\n  SwapTokenForm,\n  ArrowButton,\n  SwapButton,\n  TokenDialog,\n  // Providers and context.\n  // Swap.\n  SwapContextProvider,\n  useSwapContext,\n  useSwapFair,\n  // TokenList.\n  TokenListContextProvider,\n  useTokenMap,\n  // Token.\n  TokenContextProvider,\n  useMint,\n  // Dex.\n  DexContextProvider,\n  useFairRoute,\n  useMarketName,\n  useBbo,\n};\n"]},"metadata":{},"sourceType":"module"}