{"ast":null,"code":"// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport { TOKEN_PROGRAM_ID, ASSOCIATED_TOKEN_PROGRAM_ID, Token } from \"@solana/spl-token\";\nimport { PublicKey } from \"@solana/web3.js\";\nexport async function getOwnedAssociatedTokenAccounts(connection, publicKey) {\n  let filters = getOwnedAccountsFilters(publicKey); // @ts-ignore\n\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters\n  });\n  const accs = resp.map(({\n    pubkey,\n    account: {\n      data,\n      executable,\n      owner,\n      lamports\n    }\n  }) => ({\n    publicKey: new PublicKey(pubkey),\n    accountInfo: {\n      data,\n      executable,\n      owner: new PublicKey(owner),\n      lamports\n    }\n  })).map(({\n    publicKey,\n    accountInfo\n  }) => {\n    return {\n      publicKey,\n      account: parseTokenAccountData(accountInfo.data)\n    };\n  });\n  return (await Promise.all(accs // @ts-ignore\n  .map(async ta => {\n    const ata = await Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID, TOKEN_PROGRAM_ID, ta.account.mint, publicKey);\n    return [ta, ata];\n  }))).filter(([ta, ata]) => ta.publicKey.equals(ata)) // @ts-ignore\n  .map(([ta]) => ta);\n}\nconst ACCOUNT_LAYOUT = BufferLayout.struct([BufferLayout.blob(32, \"mint\"), BufferLayout.blob(32, \"owner\"), BufferLayout.nu64(\"amount\"), BufferLayout.blob(93)]);\nexport function parseTokenAccountData(data) {\n  // @ts-ignore\n  let {\n    mint,\n    owner,\n    amount\n  } = ACCOUNT_LAYOUT.decode(data); // @ts-ignore\n\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount)\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey) {\n  return [{\n    memcmp: {\n      // @ts-ignore\n      offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n      bytes: publicKey.toBase58()\n    }\n  }, {\n    dataSize: ACCOUNT_LAYOUT.span\n  }];\n}","map":{"version":3,"sources":["/Users/selasie/Documents/GitHub/dex_ui/swap-ui/src/utils/tokens.ts"],"names":["BufferLayout","BN","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","Token","PublicKey","getOwnedAssociatedTokenAccounts","connection","publicKey","filters","getOwnedAccountsFilters","resp","getProgramAccounts","commitment","accs","map","pubkey","account","data","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","ata","getAssociatedTokenAddress","mint","filter","equals","ACCOUNT_LAYOUT","struct","blob","nu64","amount","decode","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span"],"mappings":"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","sourcesContent":["// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedAssociatedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}