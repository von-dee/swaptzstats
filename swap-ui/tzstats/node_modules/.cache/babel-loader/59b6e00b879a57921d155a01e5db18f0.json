{"ast":null,"code":"import _slicedToArray from\"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useContext,useMemo}from\"react\";import{SOL_MINT}from\"../utils/pubkeys\";import{jsx as _jsx}from\"react/jsx-runtime\";var _TokenListContext=/*#__PURE__*/React.createContext(null);// Tag in the spl-token-registry for sollet wrapped tokens.\nexport var SPL_REGISTRY_SOLLET_TAG=\"wrapped-sollet\";// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport var SPL_REGISTRY_WORM_TAG=\"wormhole\";var SOL_TOKEN_INFO={chainId:101,address:SOL_MINT.toString(),name:\"Native SOL\",decimals:\"9\",symbol:\"SOL\",logoURI:\"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",tags:[],extensions:{website:\"https://solana.com/\",serumV3Usdc:\"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",serumV3Usdt:\"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",coingeckoId:\"solana\",waterfallbot:\"https://t.me/SOLwaterfall\"}};export function TokenListContextProvider(props){var tokenList=useMemo(function(){var list=props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();// Manually add a fake SOL mint for the native token. The component is\n// opinionated in that it distinguishes between wrapped SOL and SOL.\nlist.push(SOL_TOKEN_INFO);return list;},[props.tokenList]);// Token map for quick lookup.\nvar tokenMap=useMemo(function(){var tokenMap=new Map();tokenList.forEach(function(t){tokenMap.set(t.address,t);});return tokenMap;},[tokenList]);// Tokens with USD(x) quoted markets.\nvar swappableTokens=useMemo(function(){var tokens=tokenList.filter(function(t){var _t$extensions,_t$extensions2;var isUsdxQuoted=((_t$extensions=t.extensions)===null||_t$extensions===void 0?void 0:_t$extensions.serumV3Usdt)||((_t$extensions2=t.extensions)===null||_t$extensions2===void 0?void 0:_t$extensions2.serumV3Usdc);return isUsdxQuoted;});tokens.sort(function(a,b){return a.symbol<b.symbol?-1:a.symbol>b.symbol?1:0;});return tokens;},[tokenList,tokenMap]);// Sollet wrapped tokens.\nvar _useMemo=useMemo(function(){var tokens=tokenList.filter(function(t){var _t$tags;var isSollet=(_t$tags=t.tags)===null||_t$tags===void 0?void 0:_t$tags.includes(SPL_REGISTRY_SOLLET_TAG);return isSollet;});tokens.sort(function(a,b){return a.symbol<b.symbol?-1:a.symbol>b.symbol?1:0;});return[tokens,new Map(tokens.map(function(t){return[t.address,t];}))];},[tokenList]),_useMemo2=_slicedToArray(_useMemo,2),swappableTokensSollet=_useMemo2[0],solletMap=_useMemo2[1];// Wormhole wrapped tokens.\nvar _useMemo3=useMemo(function(){var tokens=tokenList.filter(function(t){var _t$tags2;var isSollet=(_t$tags2=t.tags)===null||_t$tags2===void 0?void 0:_t$tags2.includes(SPL_REGISTRY_WORM_TAG);return isSollet;});tokens.sort(function(a,b){return a.symbol<b.symbol?-1:a.symbol>b.symbol?1:0;});return[tokens,new Map(tokens.map(function(t){return[t.address,t];}))];},[tokenList]),_useMemo4=_slicedToArray(_useMemo3,2),swappableTokensWormhole=_useMemo4[0],wormholeMap=_useMemo4[1];return/*#__PURE__*/_jsx(_TokenListContext.Provider,{value:{tokenMap:tokenMap,wormholeMap:wormholeMap,solletMap:solletMap,swappableTokens:swappableTokens,swappableTokensWormhole:swappableTokensWormhole,swappableTokensSollet:swappableTokensSollet},children:props.children});}export function useTokenListContext(){var ctx=useContext(_TokenListContext);if(ctx===null){throw new Error(\"Context not available\");}return ctx;}export function useTokenMap(){var _useTokenListContext=useTokenListContext(),tokenMap=_useTokenListContext.tokenMap;return tokenMap;}export function useSwappableTokens(){var _useTokenListContext2=useTokenListContext(),swappableTokens=_useTokenListContext2.swappableTokens,swappableTokensWormhole=_useTokenListContext2.swappableTokensWormhole,swappableTokensSollet=_useTokenListContext2.swappableTokensSollet;return{swappableTokens:swappableTokens,swappableTokensWormhole:swappableTokensWormhole,swappableTokensSollet:swappableTokensSollet};}","map":{"version":3,"sources":["/Users/selasie/Documents/GitHub/dex_ui/swap-ui/src/context/TokenList.tsx"],"names":["React","useContext","useMemo","SOL_MINT","_TokenListContext","createContext","SPL_REGISTRY_SOLLET_TAG","SPL_REGISTRY_WORM_TAG","SOL_TOKEN_INFO","chainId","address","toString","name","decimals","symbol","logoURI","tags","extensions","website","serumV3Usdc","serumV3Usdt","coingeckoId","waterfallbot","TokenListContextProvider","props","tokenList","list","filterByClusterSlug","getList","push","tokenMap","Map","forEach","t","set","swappableTokens","tokens","filter","isUsdxQuoted","sort","a","b","isSollet","includes","map","swappableTokensSollet","solletMap","swappableTokensWormhole","wormholeMap","children","useTokenListContext","ctx","Error","useTokenMap","useSwappableTokens"],"mappings":"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","sourcesContent":["import React, { useContext, useMemo } from \"react\";\nimport { TokenInfo } from \"@solana/spl-token-registry\";\nimport { SOL_MINT } from \"../utils/pubkeys\";\n\ntype TokenListContext = {\n  tokenMap: Map<string, TokenInfo>;\n  wormholeMap: Map<string, TokenInfo>;\n  solletMap: Map<string, TokenInfo>;\n  swappableTokens: TokenInfo[];\n  swappableTokensSollet: TokenInfo[];\n  swappableTokensWormhole: TokenInfo[];\n};\nconst _TokenListContext = React.createContext<null | TokenListContext>(null);\n\n// Tag in the spl-token-registry for sollet wrapped tokens.\nexport const SPL_REGISTRY_SOLLET_TAG = \"wrapped-sollet\";\n\n// Tag in the spl-token-registry for wormhole wrapped tokens.\nexport const SPL_REGISTRY_WORM_TAG = \"wormhole\";\n\nconst SOL_TOKEN_INFO = {\n  chainId: 101,\n  address: SOL_MINT.toString(),\n  name: \"Native SOL\",\n  decimals: \"9\",\n  symbol: \"SOL\",\n  logoURI:\n    \"https://cdn.jsdelivr.net/gh/trustwallet/assets@master/blockchains/solana/info/logo.png\",\n  tags: [],\n  extensions: {\n    website: \"https://solana.com/\",\n    serumV3Usdc: \"9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT\",\n    serumV3Usdt: \"HWHvQhFmJB3NUcu1aihKmrKegfVxBEHzwVX6yZCKEsi1\",\n    coingeckoId: \"solana\",\n    waterfallbot: \"https://t.me/SOLwaterfall\",\n  },\n};\n\nexport function TokenListContextProvider(props: any) {\n  const tokenList = useMemo(() => {\n    const list = props.tokenList.filterByClusterSlug(\"mainnet-beta\").getList();\n    // Manually add a fake SOL mint for the native token. The component is\n    // opinionated in that it distinguishes between wrapped SOL and SOL.\n    list.push(SOL_TOKEN_INFO);\n    return list;\n  }, [props.tokenList]);\n\n  // Token map for quick lookup.\n  const tokenMap = useMemo(() => {\n    const tokenMap = new Map();\n    tokenList.forEach((t: TokenInfo) => {\n      tokenMap.set(t.address, t);\n    });\n    return tokenMap;\n  }, [tokenList]);\n\n  // Tokens with USD(x) quoted markets.\n  const swappableTokens = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isUsdxQuoted =\n        t.extensions?.serumV3Usdt || t.extensions?.serumV3Usdc;\n      return isUsdxQuoted;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return tokens;\n  }, [tokenList, tokenMap]);\n\n  // Sollet wrapped tokens.\n  const [swappableTokensSollet, solletMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_SOLLET_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  // Wormhole wrapped tokens.\n  const [swappableTokensWormhole, wormholeMap] = useMemo(() => {\n    const tokens = tokenList.filter((t: TokenInfo) => {\n      const isSollet = t.tags?.includes(SPL_REGISTRY_WORM_TAG);\n      return isSollet;\n    });\n    tokens.sort((a: TokenInfo, b: TokenInfo) =>\n      a.symbol < b.symbol ? -1 : a.symbol > b.symbol ? 1 : 0\n    );\n    return [\n      tokens,\n      new Map<string, TokenInfo>(tokens.map((t: TokenInfo) => [t.address, t])),\n    ];\n  }, [tokenList]);\n\n  return (\n    <_TokenListContext.Provider\n      value={{\n        tokenMap,\n        wormholeMap,\n        solletMap,\n        swappableTokens,\n        swappableTokensWormhole,\n        swappableTokensSollet,\n      }}\n    >\n      {props.children}\n    </_TokenListContext.Provider>\n  );\n}\n\nexport function useTokenListContext(): TokenListContext {\n  const ctx = useContext(_TokenListContext);\n  if (ctx === null) {\n    throw new Error(\"Context not available\");\n  }\n  return ctx;\n}\n\nexport function useTokenMap(): Map<string, TokenInfo> {\n  const { tokenMap } = useTokenListContext();\n  return tokenMap;\n}\n\nexport function useSwappableTokens() {\n  const { swappableTokens, swappableTokensWormhole, swappableTokensSollet } =\n    useTokenListContext();\n  return { swappableTokens, swappableTokensWormhole, swappableTokensSollet };\n}\n"]},"metadata":{},"sourceType":"module"}