{"ast":null,"code":"import { useLayoutEffect, useEffect, useRef, useState, useCallback } from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n} // A type of promise-like that resolves synchronously and supports only one observer\n\n\nconst _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nconst _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously await a promise and pass the result to a finally continuation\n\n\nfunction _finallyRethrows(body, finalizer) {\n  try {\n    var result = body();\n  } catch (e) {\n    return finalizer(true, e);\n  }\n\n  if (result && result.then) {\n    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n  }\n\n  return finalizer(false, value);\n}\n\nvar useIsomorphicLayoutEffect = typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined' ? useLayoutEffect : useEffect; // assign current value to a ref and providing a getter.\n// This way we are sure to always get latest value provided to hook and\n// avoid weird issues due to closures capturing stale values...\n// See https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nvar useGetter = function useGetter(t) {\n  var ref = useRef(t);\n  useIsomorphicLayoutEffect(function () {\n    ref.current = t;\n  });\n  return function () {\n    return ref.current;\n  };\n};\n\nvar InitialAsyncState = {\n  status: 'not-requested',\n  loading: false,\n  result: undefined,\n  error: undefined\n};\nvar InitialAsyncLoadingState = {\n  status: 'loading',\n  loading: true,\n  result: undefined,\n  error: undefined\n};\n\nvar defaultSetLoading = function defaultSetLoading(_asyncState) {\n  return InitialAsyncLoadingState;\n};\n\nvar defaultSetResult = function defaultSetResult(result, _asyncState) {\n  return {\n    status: 'success',\n    loading: false,\n    result: result,\n    error: undefined\n  };\n};\n\nvar defaultSetError = function defaultSetError(error, _asyncState) {\n  return {\n    status: 'error',\n    loading: false,\n    result: undefined,\n    error: error\n  };\n};\n\nvar noop = function noop() {};\n\nvar DefaultOptions = {\n  initialState: function initialState(options) {\n    return options && options.executeOnMount ? InitialAsyncLoadingState : InitialAsyncState;\n  },\n  executeOnMount: true,\n  executeOnUpdate: true,\n  setLoading: defaultSetLoading,\n  setResult: defaultSetResult,\n  setError: defaultSetError,\n  onSuccess: noop,\n  onError: noop\n};\n\nvar normalizeOptions = function normalizeOptions(options) {\n  return _extends({}, DefaultOptions, {}, options);\n};\n\nvar useAsyncState = function useAsyncState(options) {\n  var _useState = useState(function () {\n    return options.initialState(options);\n  }),\n      value = _useState[0],\n      setValue = _useState[1];\n\n  var reset = useCallback(function () {\n    return setValue(options.initialState(options));\n  }, [setValue, options]);\n  var setLoading = useCallback(function () {\n    return setValue(options.setLoading(value));\n  }, [value, setValue]);\n  var setResult = useCallback(function (result) {\n    return setValue(options.setResult(result, value));\n  }, [value, setValue]);\n  var setError = useCallback(function (error) {\n    return setValue(options.setError(error, value));\n  }, [value, setValue]);\n  var set = setValue;\n  var merge = useCallback(function (state) {\n    return set(_extends({}, value, {}, state));\n  }, [value, set]);\n  return {\n    value: value,\n    set: set,\n    merge: merge,\n    reset: reset,\n    setLoading: setLoading,\n    setResult: setResult,\n    setError: setError\n  };\n};\n\nvar useIsMounted = function useIsMounted() {\n  var ref = useRef(false);\n  useEffect(function () {\n    ref.current = true;\n    return function () {\n      ref.current = false;\n    };\n  }, []);\n  return function () {\n    return ref.current;\n  };\n};\n\nvar useCurrentPromise = function useCurrentPromise() {\n  var ref = useRef(null);\n  return {\n    set: function set(promise) {\n      return ref.current = promise;\n    },\n    get: function get() {\n      return ref.current;\n    },\n    is: function is(promise) {\n      return ref.current === promise;\n    }\n  };\n}; // Relaxed interface which accept both async and sync functions\n// Accepting sync function is convenient for useAsyncCallback\n\n\nvar useAsyncInternal = function useAsyncInternal(asyncFunction, params, options) {\n  var normalizedOptions = normalizeOptions(options);\n\n  var _useState2 = useState(null),\n      currentParams = _useState2[0],\n      setCurrentParams = _useState2[1];\n\n  var AsyncState = useAsyncState(normalizedOptions);\n  var isMounted = useIsMounted();\n  var CurrentPromise = useCurrentPromise(); // We only want to handle the promise result/error\n  // if it is the last operation and the comp is still mounted\n\n  var shouldHandlePromise = function shouldHandlePromise(p) {\n    return isMounted() && CurrentPromise.is(p);\n  };\n\n  var executeAsyncOperation = function executeAsyncOperation() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var promise = asyncFunction.apply(void 0, args);\n    setCurrentParams(args);\n\n    if (promise instanceof Promise) {\n      CurrentPromise.set(promise);\n      AsyncState.setLoading();\n      promise.then(function (result) {\n        if (shouldHandlePromise(promise)) {\n          AsyncState.setResult(result);\n        }\n\n        normalizedOptions.onSuccess(result, {\n          isCurrent: function isCurrent() {\n            return CurrentPromise.is(promise);\n          }\n        });\n      }, function (error) {\n        if (shouldHandlePromise(promise)) {\n          AsyncState.setError(error);\n        }\n\n        normalizedOptions.onError(error, {\n          isCurrent: function isCurrent() {\n            return CurrentPromise.is(promise);\n          }\n        });\n      });\n      return promise;\n    } else {\n      // We allow passing a non-async function (mostly for useAsyncCallback conveniency)\n      var syncResult = promise;\n      AsyncState.setResult(syncResult);\n      return Promise.resolve(syncResult);\n    }\n  }; // Keep this outside useEffect, because inside isMounted()\n  // will be true as the component is already mounted when it's run\n\n\n  var isMounting = !isMounted();\n  useEffect(function () {\n    if (isMounting) {\n      normalizedOptions.executeOnMount && executeAsyncOperation.apply(void 0, params);\n    } else {\n      normalizedOptions.executeOnUpdate && executeAsyncOperation.apply(void 0, params);\n    }\n  }, params);\n  return _extends({}, AsyncState.value, {\n    set: AsyncState.set,\n    merge: AsyncState.merge,\n    reset: AsyncState.reset,\n    execute: executeAsyncOperation,\n    currentPromise: CurrentPromise.get(),\n    currentParams: currentParams\n  });\n};\n\nfunction useAsync(asyncFunction, params, options) {\n  return useAsyncInternal(asyncFunction, params, options);\n}\n\nvar useAsyncAbortable = function useAsyncAbortable(asyncFunction, params, options) {\n  var abortControllerRef = useRef(); // Wrap the original async function and enhance it with abortion login\n\n  var asyncFunctionWrapper = function asyncFunctionWrapper() {\n    for (var _len2 = arguments.length, p = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      p[_key2] = arguments[_key2];\n    }\n\n    try {\n      // Cancel previous async call\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      } // Create/store new abort controller for next async call\n\n\n      var abortController = new AbortController();\n      abortControllerRef.current = abortController;\n      return Promise.resolve(_finallyRethrows(function () {\n        // @ts-ignore // TODO how to type this?\n        return Promise.resolve(asyncFunction.apply(void 0, [abortController.signal].concat(p)));\n      }, function (_wasThrown, _result) {\n        // Unset abortController ref if response is already there,\n        // as it's not needed anymore to try to abort it (would it be no-op?)\n        if (abortControllerRef.current === abortController) {\n          abortControllerRef.current = undefined;\n        }\n\n        if (_wasThrown) throw _result;\n        return _result;\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  return useAsync(asyncFunctionWrapper, params, options);\n};\n\nvar useAsyncCallback = function useAsyncCallback(asyncFunction, options) {\n  return useAsyncInternal(asyncFunction, // Hacky but in such case we don't need the params,\n  // because async function is only executed manually\n  [], _extends({}, options, {\n    executeOnMount: false,\n    executeOnUpdate: false\n  }));\n};\n\nvar useAsyncFetchMore = function useAsyncFetchMore(_ref) {\n  var value = _ref.value,\n      fetchMore = _ref.fetchMore,\n      merge = _ref.merge,\n      isEndFn = _ref.isEnd;\n  var getAsyncValue = useGetter(value);\n\n  var _useState3 = useState(false),\n      isEnd = _useState3[0],\n      setIsEnd = _useState3[1]; // TODO not really fan of this id thing, we should find a way to support cancellation!\n\n\n  var fetchMoreId = useRef(0);\n  var fetchMoreAsync = useAsyncCallback(function () {\n    try {\n      var freshAsyncValue = getAsyncValue();\n\n      if (freshAsyncValue.status !== 'success') {\n        throw new Error(\"Can't fetch more if the original fetch is not a success\");\n      }\n\n      if (fetchMoreAsync.status === 'loading') {\n        throw new Error(\"Can't fetch more, because we are already fetching more!\");\n      }\n\n      fetchMoreId.current = fetchMoreId.current + 1;\n      var currentId = fetchMoreId.current;\n      return Promise.resolve(fetchMore(freshAsyncValue.result)).then(function (moreResult) {\n        // TODO not satisfied with this, we should just use \"freshAsyncValue === getAsyncValue()\" but asyncValue is not \"stable\"\n        var isStillSameValue = freshAsyncValue.status === getAsyncValue().status && freshAsyncValue.result === getAsyncValue().result;\n        var isStillSameId = fetchMoreId.current === currentId; // Handle race conditions: we only merge the fetchMore result if the initial async value is the same\n\n        var canMerge = isStillSameValue && isStillSameId;\n\n        if (canMerge) {\n          value.merge({\n            result: merge(value.result, moreResult)\n          });\n\n          if (isEndFn(moreResult)) {\n            setIsEnd(true);\n          }\n        } // return is useful for chaining, like fetchMore().then(result => {});\n\n\n        return moreResult;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  });\n\n  var reset = function reset() {\n    fetchMoreAsync.reset();\n    setIsEnd(false);\n  }; // We only allow to fetch more on a stable async value\n  // If that value change for whatever reason, we reset the fetchmore too (which will make current pending requests to be ignored)\n  // TODO value is not stable, we could just reset on value change otherwise\n\n\n  var shouldReset = value.status !== 'success';\n  useEffect(function () {\n    if (shouldReset) {\n      reset();\n    }\n  }, [shouldReset]);\n  return {\n    canFetchMore: value.status === 'success' && fetchMoreAsync.status !== 'loading',\n    loading: fetchMoreAsync.loading,\n    status: fetchMoreAsync.status,\n    fetchMore: fetchMoreAsync.execute,\n    isEnd: isEnd\n  };\n};\n\nexport { useAsync, useAsyncAbortable, useAsyncCallback, useAsyncFetchMore };","map":{"version":3,"sources":["../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/index.ts"],"names":["useIsomorphicLayoutEffect","window","useGetter","ref","useRef","InitialAsyncState","status","loading","result","error","undefined","InitialAsyncLoadingState","defaultSetLoading","defaultSetResult","defaultSetError","noop","DefaultOptions","initialState","options","executeOnMount","executeOnUpdate","setLoading","setResult","setError","onSuccess","onError","normalizeOptions","useAsyncState","value","setValue","useState","reset","useCallback","set","merge","useIsMounted","useEffect","useCurrentPromise","get","is","useAsyncInternal","normalizedOptions","currentParams","setCurrentParams","AsyncState","isMounted","CurrentPromise","shouldHandlePromise","executeAsyncOperation","args","promise","asyncFunction","isCurrent","syncResult","Promise","isMounting","execute","currentPromise","useAsync","params","useAsyncAbortable","abortControllerRef","asyncFunctionWrapper","p","abortController","useAsyncCallback","useAsyncFetchMore","fetchMore","isEnd","isEndFn","getAsyncValue","setIsEnd","fetchMoreId","fetchMoreAsync","freshAsyncValue","currentId","moreResult","isStillSameValue","isStillSameId","canMerge","shouldReset","canFetchMore"],"mappings":"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","sourcesContent":["// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && !check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, value);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\t_entry(_this).then(returnValue, function(error) {\n\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n} from 'react';\n\n// See https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\nconst useIsomorphicLayoutEffect =\n  typeof window !== 'undefined' &&\n  typeof window.document !== 'undefined' &&\n  typeof window.document.createElement !== 'undefined'\n    ? useLayoutEffect\n    : useEffect;\n\n// assign current value to a ref and providing a getter.\n// This way we are sure to always get latest value provided to hook and\n// avoid weird issues due to closures capturing stale values...\n// See https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nconst useGetter = <T>(t: T) => {\n  const ref = useRef(t);\n  useIsomorphicLayoutEffect(() => {\n    ref.current = t;\n  });\n  return () => ref.current;\n};\n\ntype UnknownResult = unknown;\n\n// Convenient to avoid declaring the type of args, which may help reduce type boilerplate\n//type UnknownArgs = unknown[];\n// TODO unfortunately it seems required for now if we want default param to work...\n// See https://twitter.com/sebastienlorber/status/1170003594894106624\ntype UnknownArgs = any[];\n\nexport type AsyncStateStatus =\n  | 'not-requested'\n  | 'loading'\n  | 'success'\n  | 'error';\n\nexport type AsyncState<R> = {\n  status: AsyncStateStatus;\n  loading: boolean;\n  error: Error | undefined;\n  result: R | undefined;\n};\ntype SetLoading<R> = (asyncState: AsyncState<R>) => AsyncState<R>;\ntype SetResult<R> = (result: R, asyncState: AsyncState<R>) => AsyncState<R>;\ntype SetError<R> = (error: Error, asyncState: AsyncState<R>) => AsyncState<R>;\n\ntype MaybePromise<T> = Promise<T> | T;\n\ntype PromiseCallbackOptions = {\n  // Permit to know if the success/error belongs to the last async call\n  isCurrent: () => boolean;\n\n  // TODO this can be convenient but need some refactor\n  // params: Args;\n};\n\nexport type UseAsyncOptionsNormalized<R> = {\n  initialState: (options?: UseAsyncOptionsNormalized<R>) => AsyncState<R>;\n  executeOnMount: boolean;\n  executeOnUpdate: boolean;\n  setLoading: SetLoading<R>;\n  setResult: SetResult<R>;\n  setError: SetError<R>;\n  onSuccess: (r: R, options: PromiseCallbackOptions) => void;\n  onError: (e: Error, options: PromiseCallbackOptions) => void;\n};\nexport type UseAsyncOptions<R> =\n  | Partial<UseAsyncOptionsNormalized<R>>\n  | undefined\n  | null;\n\nconst InitialAsyncState: AsyncState<any> = {\n  status: 'not-requested',\n  loading: false,\n  result: undefined,\n  error: undefined,\n};\n\nconst InitialAsyncLoadingState: AsyncState<any> = {\n  status: 'loading',\n  loading: true,\n  result: undefined,\n  error: undefined,\n};\n\nconst defaultSetLoading: SetLoading<any> = _asyncState =>\n  InitialAsyncLoadingState;\n\nconst defaultSetResult: SetResult<any> = (result, _asyncState) => ({\n  status: 'success',\n  loading: false,\n  result: result,\n  error: undefined,\n});\n\nconst defaultSetError: SetError<any> = (error, _asyncState) => ({\n  status: 'error',\n  loading: false,\n  result: undefined,\n  error: error,\n});\n\nconst noop = () => {};\n\nconst DefaultOptions: UseAsyncOptionsNormalized<any> = {\n  initialState: options =>\n    options && options.executeOnMount\n      ? InitialAsyncLoadingState\n      : InitialAsyncState,\n  executeOnMount: true,\n  executeOnUpdate: true,\n  setLoading: defaultSetLoading,\n  setResult: defaultSetResult,\n  setError: defaultSetError,\n  onSuccess: noop,\n  onError: noop,\n};\n\nconst normalizeOptions = <R>(\n  options: UseAsyncOptions<R>\n): UseAsyncOptionsNormalized<R> => ({\n  ...DefaultOptions,\n  ...options,\n});\n\ntype UseAsyncStateResult<R> = {\n  value: AsyncState<R>;\n  set: (value: AsyncState<R>) => void;\n  merge: (value: Partial<AsyncState<R>>) => void;\n  reset: () => void;\n  setLoading: () => void;\n  setResult: (r: R) => void;\n  setError: (e: Error) => void;\n};\nconst useAsyncState = <R extends {}>(\n  options: UseAsyncOptionsNormalized<R>\n): UseAsyncStateResult<R> => {\n  const [value, setValue] = useState<AsyncState<R>>(() =>\n    options.initialState(options)\n  );\n\n  const reset = useCallback(() => setValue(options.initialState(options)), [\n    setValue,\n    options,\n  ]);\n\n  const setLoading = useCallback(() => setValue(options.setLoading(value)), [\n    value,\n    setValue,\n  ]);\n  const setResult = useCallback(\n    (result: R) => setValue(options.setResult(result, value)),\n    [value, setValue]\n  );\n\n  const setError = useCallback(\n    (error: Error) => setValue(options.setError(error, value)),\n    [value, setValue]\n  );\n\n  const set = setValue;\n\n  const merge = useCallback(\n    (state: Partial<AsyncState<R>>) =>\n      set({\n        ...value,\n        ...state,\n      }),\n    [value, set]\n  );\n  return {\n    value,\n    set,\n    merge,\n    reset,\n    setLoading,\n    setResult,\n    setError,\n  };\n};\n\nconst useIsMounted = (): (() => boolean) => {\n  const ref = useRef<boolean>(false);\n  useEffect(() => {\n    ref.current = true;\n    return () => {\n      ref.current = false;\n    };\n  }, []);\n  return () => ref.current;\n};\n\ntype UseCurrentPromiseReturn<R> = {\n  set: (promise: Promise<R>) => void;\n  get: () => Promise<R> | null;\n  is: (promise: Promise<R>) => boolean;\n};\nconst useCurrentPromise = <R>(): UseCurrentPromiseReturn<R> => {\n  const ref = useRef<Promise<R> | null>(null);\n  return {\n    set: promise => (ref.current = promise),\n    get: () => ref.current,\n    is: promise => ref.current === promise,\n  };\n};\n\nexport type UseAsyncReturn<\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n> = AsyncState<R> & {\n  set: (value: AsyncState<R>) => void;\n  merge: (value: Partial<AsyncState<R>>) => void;\n  reset: () => void;\n  execute: (...args: Args) => Promise<R>;\n  currentPromise: Promise<R> | null;\n  currentParams: Args | null;\n};\n\n// Relaxed interface which accept both async and sync functions\n// Accepting sync function is convenient for useAsyncCallback\nconst useAsyncInternal = <R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => MaybePromise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> => {\n  const normalizedOptions = normalizeOptions<R>(options);\n\n  const [currentParams, setCurrentParams] = useState<Args | null>(null);\n\n  const AsyncState = useAsyncState<R>(normalizedOptions);\n\n  const isMounted = useIsMounted();\n  const CurrentPromise = useCurrentPromise<R>();\n\n  // We only want to handle the promise result/error\n  // if it is the last operation and the comp is still mounted\n  const shouldHandlePromise = (p: Promise<R>) =>\n    isMounted() && CurrentPromise.is(p);\n\n  const executeAsyncOperation = (...args: Args): Promise<R> => {\n    const promise: MaybePromise<R> = asyncFunction(...args);\n    setCurrentParams(args);\n    if (promise instanceof Promise) {\n      CurrentPromise.set(promise);\n      AsyncState.setLoading();\n      promise.then(\n        result => {\n          if (shouldHandlePromise(promise)) {\n            AsyncState.setResult(result);\n          }\n          normalizedOptions.onSuccess(result, {\n            isCurrent: () => CurrentPromise.is(promise),\n          });\n        },\n        error => {\n          if (shouldHandlePromise(promise)) {\n            AsyncState.setError(error);\n          }\n          normalizedOptions.onError(error, {\n            isCurrent: () => CurrentPromise.is(promise),\n          });\n        }\n      );\n      return promise;\n    } else {\n      // We allow passing a non-async function (mostly for useAsyncCallback conveniency)\n      const syncResult: R = promise;\n      AsyncState.setResult(syncResult);\n      return Promise.resolve<R>(syncResult);\n    }\n  };\n\n  // Keep this outside useEffect, because inside isMounted()\n  // will be true as the component is already mounted when it's run\n  const isMounting = !isMounted();\n  useEffect(() => {\n    if (isMounting) {\n      normalizedOptions.executeOnMount && executeAsyncOperation(...params);\n    } else {\n      normalizedOptions.executeOnUpdate && executeAsyncOperation(...params);\n    }\n  }, params);\n\n  return {\n    ...AsyncState.value,\n    set: AsyncState.set,\n    merge: AsyncState.merge,\n    reset: AsyncState.reset,\n    execute: executeAsyncOperation,\n    currentPromise: CurrentPromise.get(),\n    currentParams,\n  };\n};\n\n// override to allow passing an async function with no args:\n// gives more user-freedom to create an inline async function\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: () => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args>;\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args>;\n\nexport function useAsync<R = UnknownResult, Args extends any[] = UnknownArgs>(\n  asyncFunction: (...args: Args) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> {\n  return useAsyncInternal(asyncFunction, params, options);\n}\n\ntype AddArg<H, T extends any[]> = ((h: H, ...t: T) => void) extends ((\n  ...r: infer R\n) => void)\n  ? R\n  : never;\n\nexport const useAsyncAbortable = <\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n>(\n  asyncFunction: (...args: AddArg<AbortSignal, Args>) => Promise<R>,\n  params: Args,\n  options?: UseAsyncOptions<R>\n): UseAsyncReturn<R, Args> => {\n  const abortControllerRef = useRef<AbortController>();\n\n  // Wrap the original async function and enhance it with abortion login\n  const asyncFunctionWrapper: (...args: Args) => Promise<R> = async (\n    ...p: Args\n  ) => {\n    // Cancel previous async call\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n    // Create/store new abort controller for next async call\n    const abortController = new AbortController();\n    abortControllerRef.current = abortController;\n\n    try {\n      // @ts-ignore // TODO how to type this?\n      return await asyncFunction(abortController.signal, ...p);\n    } finally {\n      // Unset abortController ref if response is already there,\n      // as it's not needed anymore to try to abort it (would it be no-op?)\n      if (abortControllerRef.current === abortController) {\n        abortControllerRef.current = undefined;\n      }\n    }\n  };\n\n  return useAsync(asyncFunctionWrapper, params, options);\n};\n\n// keep compat with TS < 3.5\ntype LegacyOmit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n\n// Some options are not allowed for useAsyncCallback\nexport type UseAsyncCallbackOptions<R> =\n  | LegacyOmit<\n      Partial<UseAsyncOptionsNormalized<R>>,\n      'executeOnMount' | 'executeOnUpdate' | 'initialState'\n    >\n  | undefined\n  | null;\n\nexport const useAsyncCallback = <\n  R = UnknownResult,\n  Args extends any[] = UnknownArgs\n>(\n  asyncFunction: (...args: Args) => MaybePromise<R>,\n  options?: UseAsyncCallbackOptions<R>\n): UseAsyncReturn<R, Args> => {\n  return useAsyncInternal(\n    asyncFunction,\n    // Hacky but in such case we don't need the params,\n    // because async function is only executed manually\n    [] as any,\n    {\n      ...options,\n      executeOnMount: false,\n      executeOnUpdate: false,\n    }\n  );\n};\n\nexport const useAsyncFetchMore = <R, Args extends any[]>({\n  value,\n  fetchMore,\n  merge,\n  isEnd: isEndFn,\n}: {\n  value: UseAsyncReturn<R, Args>;\n  fetchMore: (result: R) => Promise<R>;\n  merge: (result: R, moreResult: R) => R;\n  isEnd: (moreResult: R) => boolean;\n}) => {\n  const getAsyncValue = useGetter(value);\n  const [isEnd, setIsEnd] = useState(false);\n\n  // TODO not really fan of this id thing, we should find a way to support cancellation!\n  const fetchMoreId = useRef(0);\n\n  const fetchMoreAsync = useAsyncCallback(async () => {\n    const freshAsyncValue = getAsyncValue();\n    if (freshAsyncValue.status !== 'success') {\n      throw new Error(\n        \"Can't fetch more if the original fetch is not a success\"\n      );\n    }\n    if (fetchMoreAsync.status === 'loading') {\n      throw new Error(\n        \"Can't fetch more, because we are already fetching more!\"\n      );\n    }\n\n    fetchMoreId.current = fetchMoreId.current + 1;\n    const currentId = fetchMoreId.current;\n    const moreResult = await fetchMore(freshAsyncValue.result!);\n\n    // TODO not satisfied with this, we should just use \"freshAsyncValue === getAsyncValue()\" but asyncValue is not \"stable\"\n    const isStillSameValue =\n      freshAsyncValue.status === getAsyncValue().status &&\n      freshAsyncValue.result === getAsyncValue().result;\n\n    const isStillSameId = fetchMoreId.current === currentId;\n\n    // Handle race conditions: we only merge the fetchMore result if the initial async value is the same\n    const canMerge = isStillSameValue && isStillSameId;\n    if (canMerge) {\n      value.merge({\n        result: merge(value.result!, moreResult),\n      });\n      if (isEndFn(moreResult)) {\n        setIsEnd(true);\n      }\n    }\n\n    // return is useful for chaining, like fetchMore().then(result => {});\n    return moreResult;\n  });\n\n  const reset = () => {\n    fetchMoreAsync.reset();\n    setIsEnd(false);\n  };\n\n  // We only allow to fetch more on a stable async value\n  // If that value change for whatever reason, we reset the fetchmore too (which will make current pending requests to be ignored)\n  // TODO value is not stable, we could just reset on value change otherwise\n  const shouldReset = value.status !== 'success';\n  useEffect(() => {\n    if (shouldReset) {\n      reset();\n    }\n  }, [shouldReset]);\n\n  return {\n    canFetchMore:\n      value.status === 'success' && fetchMoreAsync.status !== 'loading',\n    loading: fetchMoreAsync.loading,\n    status: fetchMoreAsync.status,\n    fetchMore: fetchMoreAsync.execute,\n    isEnd,\n  };\n};\n"]},"metadata":{},"sourceType":"module"}