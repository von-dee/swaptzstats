{"ast":null,"code":"import _slicedToArray from\"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _regeneratorRuntime from\"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\nimport*as BufferLayout from\"buffer-layout\";import{BN}from\"@project-serum/anchor\";import{TOKEN_PROGRAM_ID,ASSOCIATED_TOKEN_PROGRAM_ID,Token}from\"@solana/spl-token\";import{PublicKey}from\"@solana/web3.js\";export function getOwnedAssociatedTokenAccounts(_x,_x2){return _getOwnedAssociatedTokenAccounts.apply(this,arguments);}function _getOwnedAssociatedTokenAccounts(){_getOwnedAssociatedTokenAccounts=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(connection,publicKey){var filters,resp,accs;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:filters=getOwnedAccountsFilters(publicKey);// @ts-ignore\n_context2.next=3;return connection.getProgramAccounts(TOKEN_PROGRAM_ID,{commitment:connection.commitment,filters:filters});case 3:resp=_context2.sent;accs=resp.map(function(_ref){var pubkey=_ref.pubkey,_ref$account=_ref.account,data=_ref$account.data,executable=_ref$account.executable,owner=_ref$account.owner,lamports=_ref$account.lamports;return{publicKey:new PublicKey(pubkey),accountInfo:{data:data,executable:executable,owner:new PublicKey(owner),lamports:lamports}};}).map(function(_ref2){var publicKey=_ref2.publicKey,accountInfo=_ref2.accountInfo;return{publicKey:publicKey,account:parseTokenAccountData(accountInfo.data)};});_context2.next=7;return Promise.all(accs// @ts-ignore\n.map(/*#__PURE__*/function(){var _ref3=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(ta){var ata;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return Token.getAssociatedTokenAddress(ASSOCIATED_TOKEN_PROGRAM_ID,TOKEN_PROGRAM_ID,ta.account.mint,publicKey);case 2:ata=_context.sent;return _context.abrupt(\"return\",[ta,ata]);case 4:case\"end\":return _context.stop();}}},_callee);}));return function(_x3){return _ref3.apply(this,arguments);};}()));case 7:return _context2.abrupt(\"return\",_context2.sent.filter(function(_ref4){var _ref5=_slicedToArray(_ref4,2),ta=_ref5[0],ata=_ref5[1];return ta.publicKey.equals(ata);}).map(function(_ref6){var _ref7=_slicedToArray(_ref6,1),ta=_ref7[0];return ta;}));case 8:case\"end\":return _context2.stop();}}},_callee2);}));return _getOwnedAssociatedTokenAccounts.apply(this,arguments);}var ACCOUNT_LAYOUT=BufferLayout.struct([BufferLayout.blob(32,\"mint\"),BufferLayout.blob(32,\"owner\"),BufferLayout.nu64(\"amount\"),BufferLayout.blob(93)]);export function parseTokenAccountData(data){// @ts-ignore\nvar _ACCOUNT_LAYOUT$decod=ACCOUNT_LAYOUT.decode(data),mint=_ACCOUNT_LAYOUT$decod.mint,owner=_ACCOUNT_LAYOUT$decod.owner,amount=_ACCOUNT_LAYOUT$decod.amount;// @ts-ignore\nreturn{mint:new PublicKey(mint),owner:new PublicKey(owner),amount:new BN(amount)};}function getOwnedAccountsFilters(publicKey){return[{memcmp:{// @ts-ignore\noffset:ACCOUNT_LAYOUT.offsetOf(\"owner\"),bytes:publicKey.toBase58()}},{dataSize:ACCOUNT_LAYOUT.span}];}","map":{"version":3,"sources":["/Users/selasie/Documents/GitHub/dex_ui/swap-ui/src/utils/tokens.ts"],"names":["BufferLayout","BN","TOKEN_PROGRAM_ID","ASSOCIATED_TOKEN_PROGRAM_ID","Token","PublicKey","getOwnedAssociatedTokenAccounts","connection","publicKey","filters","getOwnedAccountsFilters","getProgramAccounts","commitment","resp","accs","map","pubkey","account","data","executable","owner","lamports","accountInfo","parseTokenAccountData","Promise","all","ta","getAssociatedTokenAddress","mint","ata","filter","equals","ACCOUNT_LAYOUT","struct","blob","nu64","decode","amount","memcmp","offset","offsetOf","bytes","toBase58","dataSize","span"],"mappings":"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","sourcesContent":["// TODO: replace this whole file with something more modern. This is all copied\n//       from sollet.\n\nimport * as BufferLayout from \"buffer-layout\";\nimport { BN } from \"@project-serum/anchor\";\nimport {\n  TOKEN_PROGRAM_ID,\n  ASSOCIATED_TOKEN_PROGRAM_ID,\n  Token,\n  AccountInfo as TokenAccount,\n} from \"@solana/spl-token\";\nimport { Connection, PublicKey } from \"@solana/web3.js\";\n\nexport async function getOwnedAssociatedTokenAccounts(\n  connection: Connection,\n  publicKey: PublicKey\n) {\n  let filters = getOwnedAccountsFilters(publicKey);\n  // @ts-ignore\n  let resp = await connection.getProgramAccounts(TOKEN_PROGRAM_ID, {\n    commitment: connection.commitment,\n    filters,\n  });\n\n  const accs = resp\n    .map(({ pubkey, account: { data, executable, owner, lamports } }: any) => ({\n      publicKey: new PublicKey(pubkey),\n      accountInfo: {\n        data,\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n      },\n    }))\n    .map(({ publicKey, accountInfo }: any) => {\n      return { publicKey, account: parseTokenAccountData(accountInfo.data) };\n    });\n\n  return (\n    (\n      await Promise.all(\n        accs\n          // @ts-ignore\n          .map(async (ta) => {\n            const ata = await Token.getAssociatedTokenAddress(\n              ASSOCIATED_TOKEN_PROGRAM_ID,\n              TOKEN_PROGRAM_ID,\n              ta.account.mint,\n              publicKey\n            );\n            return [ta, ata];\n          })\n      )\n    )\n      // @ts-ignore\n      .filter(([ta, ata]) => ta.publicKey.equals(ata))\n      // @ts-ignore\n      .map(([ta]) => ta)\n  );\n}\n\nconst ACCOUNT_LAYOUT = BufferLayout.struct([\n  BufferLayout.blob(32, \"mint\"),\n  BufferLayout.blob(32, \"owner\"),\n  BufferLayout.nu64(\"amount\"),\n  BufferLayout.blob(93),\n]);\n\nexport function parseTokenAccountData(data: Buffer): TokenAccount {\n  // @ts-ignore\n  let { mint, owner, amount } = ACCOUNT_LAYOUT.decode(data);\n  // @ts-ignore\n  return {\n    mint: new PublicKey(mint),\n    owner: new PublicKey(owner),\n    amount: new BN(amount),\n  };\n}\n\nfunction getOwnedAccountsFilters(publicKey: PublicKey) {\n  return [\n    {\n      memcmp: {\n        // @ts-ignore\n        offset: ACCOUNT_LAYOUT.offsetOf(\"owner\"),\n        bytes: publicKey.toBase58(),\n      },\n    },\n    {\n      dataSize: ACCOUNT_LAYOUT.span,\n    },\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}