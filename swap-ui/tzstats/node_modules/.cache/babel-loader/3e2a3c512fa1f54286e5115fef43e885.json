{"ast":null,"code":"var _jsxFileName = \"/Users/selasie/Documents/GitHub/dex_ui/swap-ui/tzstats/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport \"@fontsource/roboto\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\"; // @ts-ignore\n\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport { Connection } from \"@solana/web3.js\";\nimport { TokenListProvider } from \"@solana/spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\nimport tezosTokens from './data/tezos.tokenlist.json'; // App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(SnackbarProvider, {\n    maxSnack: 5,\n    autoHideDuration: 8000,\n    children: /*#__PURE__*/_jsxDEV(AppInner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_c = App;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    minHeight: \"100vh\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    background: \"#101535\"\n  }\n}));\n\nfunction AppInner() {\n  _s();\n\n  const styles = useStyles();\n  const {\n    enqueueSnackbar\n  } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState(null);\n  const [provider, wallet] = useMemo(() => {\n    const opts = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\"\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(connection, wallet, opts, (tx, err) => {\n      if (err) {\n        enqueueSnackbar(`Error: ${err.toString()}`, {\n          variant: \"error\"\n        });\n      } else {\n        enqueueSnackbar(\"Transaction sent\", {\n          variant: \"success\",\n          action: /*#__PURE__*/_jsxDEV(Button, {\n            color: \"inherit\",\n            component: \"a\",\n            target: \"_blank\",\n            rel: \"noopener\",\n            href: `https://explorer.solana.com/tx/${tx}`,\n            children: \"View on Solana Explorer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)\n        });\n      }\n    });\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]); // Connect to the wallet.\n\n  useEffect(() => {\n    console.log(\"Token Lists\");\n    console.log(new TokenListProvider().resolve().then(setTokenList));\n    console.log(tezosTokens);\n    console.log(tezosTokens);\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", {\n        variant: \"success\"\n      });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", {\n        variant: \"info\"\n      });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    justify: \"center\",\n    alignItems: \"center\",\n    className: styles.root,\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      variant: \"outlined\",\n      onClick: () => !isConnected ? wallet.connect() : wallet.disconnect(),\n      style: {\n        position: \"fixed\",\n        color: \"white\",\n        right: 24,\n        top: 24\n      },\n      children: !isConnected ? \"Connect\" : \"Disconnect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), tokenList && /*#__PURE__*/_jsxDEV(Swap, {\n      provider: provider,\n      tokenList: tokenList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n} // Cast wallet to AnchorWallet in order to be compatible with Anchor's Provider class\n\n\n_s(AppInner, \"TkEk2jTHUsmekGLHpbP/SMYguPY=\", false, function () {\n  return [useStyles, useSnackbar];\n});\n\n_c2 = AppInner;\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  constructor(connection, wallet, opts, onTransaction) {\n    const newWallet = wallet;\n    super(connection, newWallet, opts);\n    this.onTransaction = void 0;\n    this.onTransaction = onTransaction;\n  }\n\n  async send(tx, signers, opts) {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n\n      return \"\";\n    }\n  }\n\n  async sendAll(txs, opts) {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach(sig => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n\n      return [];\n    }\n  }\n\n}\n\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"AppInner\");","map":{"version":3,"sources":["/Users/selasie/Documents/GitHub/dex_ui/swap-ui/tzstats/src/App.tsx"],"names":["useState","useEffect","useMemo","SnackbarProvider","useSnackbar","Button","Grid","makeStyles","Provider","Wallet","Connection","TokenListProvider","Swap","tezosTokens","App","useStyles","theme","root","minHeight","paddingLeft","spacing","paddingRight","background","AppInner","styles","enqueueSnackbar","isConnected","setIsConnected","tokenList","setTokenList","provider","wallet","opts","preflightCommitment","commitment","network","connection","NotifyingProvider","tx","err","toString","variant","action","resolve","then","console","log","on","connect","disconnect","position","color","right","top","constructor","onTransaction","newWallet","send","signers","txSig","Error","undefined","sendAll","txs","txSigs","forEach","sig"],"mappings":";;;AAAA,OAAO,oBAAP;AACA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,WAA9C;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,UAAvB,QAAyC,mBAAzC;AACA,SAASC,QAAT,QAAyB,uBAAzB,C,CACA;;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,SAGEC,UAHF,QAOO,iBAPP;AAQA,SAEEC,iBAFF,QAGO,4BAHP;AAIA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAO,WAAP;AAEA,OAAOC,WAAP,MAAwB,6BAAxB,C,CAEA;AACA;AACA;AACA;;;;AACA,SAASC,GAAT,GAAe;AACb,sBACE,QAAC,gBAAD;AAAkB,IAAA,QAAQ,EAAE,CAA5B;AAA+B,IAAA,gBAAgB,EAAE,IAAjD;AAAA,2BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD;;KANQA,G;AAQT,MAAMC,SAAS,GAAGR,UAAU,CAAES,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,SAAS,EAAE,OADP;AAEJC,IAAAA,WAAW,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,CAFT;AAGJC,IAAAA,YAAY,EAAEL,KAAK,CAACI,OAAN,CAAc,CAAd,CAHV;AAIJE,IAAAA,UAAU,EAAE;AAJR;AADiC,CAAZ,CAAD,CAA5B;;AASA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAMC,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAM;AAAEU,IAAAA;AAAF,MAAsBrB,WAAW,EAAvC;AACA,QAAM,CAACsB,WAAD,EAAcC,cAAd,IAAgC3B,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC4B,SAAD,EAAYC,YAAZ,IAA4B7B,QAAQ,CAA4B,IAA5B,CAA1C;AAEA,QAAM,CAAC8B,QAAD,EAAWC,MAAX,IAAqB7B,OAAO,CAAC,MAAM;AACvC,UAAM8B,IAAoB,GAAG;AAC3BC,MAAAA,mBAAmB,EAAE,QADM;AAE3BC,MAAAA,UAAU,EAAE;AAFe,KAA7B;AAIA,UAAMC,OAAO,GAAG,qCAAhB;AACA,UAAMJ,MAAM,GAAG,IAAItB,MAAJ,CAAW,uBAAX,EAAoC0B,OAApC,CAAf;AACA,UAAMC,UAAU,GAAG,IAAI1B,UAAJ,CAAeyB,OAAf,EAAwBH,IAAI,CAACC,mBAA7B,CAAnB;AACA,UAAMH,QAAQ,GAAG,IAAIO,iBAAJ,CACfD,UADe,EAEfL,MAFe,EAGfC,IAHe,EAIf,CAACM,EAAD,EAAKC,GAAL,KAAa;AACX,UAAIA,GAAJ,EAAS;AACPd,QAAAA,eAAe,CAAE,UAASc,GAAG,CAACC,QAAJ,EAAe,EAA1B,EAA6B;AAC1CC,UAAAA,OAAO,EAAE;AADiC,SAA7B,CAAf;AAGD,OAJD,MAIO;AACLhB,QAAAA,eAAe,CAAC,kBAAD,EAAqB;AAClCgB,UAAAA,OAAO,EAAE,SADyB;AAElCC,UAAAA,MAAM,eACJ,QAAC,MAAD;AACE,YAAA,KAAK,EAAC,SADR;AAEE,YAAA,SAAS,EAAC,GAFZ;AAGE,YAAA,MAAM,EAAC,QAHT;AAIE,YAAA,GAAG,EAAC,UAJN;AAKE,YAAA,IAAI,EAAG,kCAAiCJ,EAAG,EAL7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHgC,SAArB,CAAf;AAcD;AACF,KAzBc,CAAjB;AA2BA,WAAO,CAACR,QAAD,EAAWC,MAAX,CAAP;AACD,GApCiC,EAoC/B,CAACN,eAAD,CApC+B,CAAlC;AAsCAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,iBAAJ,GAAwBgC,OAAxB,GAAkCC,IAAlC,CAAuCf,YAAvC;AACD,GAFQ,EAEN,CAACA,YAAD,CAFM,CAAT,CA5CkB,CAgDlB;;AACA5B,EAAAA,SAAS,CAAC,MAAM;AACd4C,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAD,IAAAA,OAAO,CAACC,GAAR,CAAY,IAAInC,iBAAJ,GAAwBgC,OAAxB,GAAkCC,IAAlC,CAAuCf,YAAvC,CAAZ;AACAgB,IAAAA,OAAO,CAACC,GAAR,CAAYjC,WAAZ;AACAgC,IAAAA,OAAO,CAACC,GAAR,CAAYjC,WAAZ;AAEAkB,IAAAA,MAAM,CAACgB,EAAP,CAAU,SAAV,EAAqB,MAAM;AACzBtB,MAAAA,eAAe,CAAC,kBAAD,EAAqB;AAAEgB,QAAAA,OAAO,EAAE;AAAX,OAArB,CAAf;AACAd,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD,KAHD;AAIAI,IAAAA,MAAM,CAACgB,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC5BtB,MAAAA,eAAe,CAAC,qBAAD,EAAwB;AAAEgB,QAAAA,OAAO,EAAE;AAAX,OAAxB,CAAf;AACAd,MAAAA,cAAc,CAAC,KAAD,CAAd;AACD,KAHD;AAID,GAdQ,EAcN,CAACI,MAAD,EAASN,eAAT,CAdM,CAAT;AAgBA,sBACE,QAAC,IAAD;AACE,IAAA,SAAS,MADX;AAEE,IAAA,OAAO,EAAC,QAFV;AAGE,IAAA,UAAU,EAAC,QAHb;AAIE,IAAA,SAAS,EAAED,MAAM,CAACP,IAJpB;AAAA,4BAME,QAAC,MAAD;AACE,MAAA,OAAO,EAAC,UADV;AAEE,MAAA,OAAO,EAAE,MAAO,CAACS,WAAD,GAAeK,MAAM,CAACiB,OAAP,EAAf,GAAkCjB,MAAM,CAACkB,UAAP,EAFpD;AAGE,MAAA,KAAK,EAAE;AAAEC,QAAAA,QAAQ,EAAE,OAAZ;AAAqBC,QAAAA,KAAK,EAAE,OAA5B;AAAqCC,QAAAA,KAAK,EAAE,EAA5C;AAAgDC,QAAAA,GAAG,EAAE;AAArD,OAHT;AAAA,gBAKG,CAAC3B,WAAD,GAAe,SAAf,GAA2B;AAL9B;AAAA;AAAA;AAAA;AAAA,YANF,EAaGE,SAAS,iBAAI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEE,QAAhB;AAA0B,MAAA,SAAS,EAAEF;AAArC;AAAA;AAAA;AAAA;AAAA,YAbhB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAiBD,C,CAED;;;GApFSL,Q;UACQR,S,EACaX,W;;;MAFrBmB,Q;;AA2FT;AACA;AACA;AACA;AACA;AACA;AACA,MAAMc,iBAAN,SAAgC7B,QAAhC,CAAyC;AACvC;AAMA8C,EAAAA,WAAW,CACTlB,UADS,EAETL,MAFS,EAGTC,IAHS,EAITuB,aAJS,EAKT;AACA,UAAMC,SAAS,GAAGzB,MAAlB;AACA,UAAMK,UAAN,EAAkBoB,SAAlB,EAA6BxB,IAA7B;AAFA,SAVMuB,aAUN;AAGA,SAAKA,aAAL,GAAqBA,aAArB;AACD;;AAES,QAAJE,IAAI,CACRnB,EADQ,EAERoB,OAFQ,EAGR1B,IAHQ,EAIuB;AAC/B,QAAI;AACF,YAAM2B,KAAK,GAAG,MAAM,MAAMF,IAAN,CAAWnB,EAAX,EAAeoB,OAAf,EAAwB1B,IAAxB,CAApB;AACA,WAAKuB,aAAL,CAAmBI,KAAnB;AACA,aAAOA,KAAP;AACD,KAJD,CAIE,OAAOpB,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYqB,KAAf,IAAwBrB,GAAG,KAAKsB,SAApC,EAA+C;AAC7C,aAAKN,aAAL,CAAmBM,SAAnB,EAA8BtB,GAA9B;AACD;;AACD,aAAO,EAAP;AACD;AACF;;AAEY,QAAPuB,OAAO,CACXC,GADW,EAEX/B,IAFW,EAG2B;AACtC,QAAI;AACF,YAAMgC,MAAM,GAAG,MAAM,MAAMF,OAAN,CAAcC,GAAd,EAAmB/B,IAAnB,CAArB;AACAgC,MAAAA,MAAM,CAACC,OAAP,CAAgBC,GAAD,IAAS;AACtB,aAAKX,aAAL,CAAmBW,GAAnB;AACD,OAFD;AAGA,aAAOF,MAAP;AACD,KAND,CAME,OAAOzB,GAAP,EAAY;AACZ,UAAIA,GAAG,YAAYqB,KAAf,IAAwBrB,GAAG,KAAKsB,SAApC,EAA+C;AAC7C,aAAKN,aAAL,CAAmBM,SAAnB,EAA8BtB,GAA9B;AACD;;AACD,aAAO,EAAP;AACD;AACF;;AAnDsC;;AAsDzC,eAAezB,GAAf","sourcesContent":["import \"@fontsource/roboto\";\nimport { useState, useEffect, useMemo } from \"react\";\nimport { SnackbarProvider, useSnackbar } from \"notistack\";\nimport { Button, Grid, makeStyles } from \"@material-ui/core\";\nimport { Provider } from \"@project-serum/anchor\";\n// @ts-ignore\nimport Wallet from \"@project-serum/sol-wallet-adapter\";\nimport {\n  Signer,\n  ConfirmOptions,\n  Connection,\n  Transaction,\n  TransactionSignature,\n  PublicKey,\n} from \"@solana/web3.js\";\nimport {\n  TokenListContainer,\n  TokenListProvider,\n} from \"@solana/spl-token-registry\";\nimport Swap from \"@project-serum/swap-ui\";\nimport \"./App.css\";\n\nimport tezosTokens from './data/tezos.tokenlist.json';\n\n// App illustrating the use of the Swap component.\n//\n// One needs to just provide an Anchor `Provider` and a `TokenListContainer`\n// to the `Swap` component, and then everything else is taken care of.\nfunction App() {\n  return (\n    <SnackbarProvider maxSnack={5} autoHideDuration={8000}>\n      <AppInner />\n    </SnackbarProvider>\n  );\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    minHeight: \"100vh\",\n    paddingLeft: theme.spacing(1),\n    paddingRight: theme.spacing(1),\n    background: \"#101535\"\n  },\n}));\n\nfunction AppInner() {\n  const styles = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [isConnected, setIsConnected] = useState(false);\n  const [tokenList, setTokenList] = useState<TokenListContainer | null>(null);\n\n  const [provider, wallet] = useMemo(() => {\n    const opts: ConfirmOptions = {\n      preflightCommitment: \"recent\",\n      commitment: \"recent\",\n    };\n    const network = \"https://solana-api.projectserum.com\";\n    const wallet = new Wallet(\"https://www.sollet.io\", network);\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new NotifyingProvider(\n      connection,\n      wallet,\n      opts,\n      (tx, err) => {\n        if (err) {\n          enqueueSnackbar(`Error: ${err.toString()}`, {\n            variant: \"error\",\n          });\n        } else {\n          enqueueSnackbar(\"Transaction sent\", {\n            variant: \"success\",\n            action: (\n              <Button\n                color=\"inherit\"\n                component=\"a\"\n                target=\"_blank\"\n                rel=\"noopener\"\n                href={`https://explorer.solana.com/tx/${tx}`}\n              >\n                View on Solana Explorer\n              </Button>\n            ),\n          });\n        }\n      }\n    );\n    return [provider, wallet];\n  }, [enqueueSnackbar]);\n\n  useEffect(() => {\n    new TokenListProvider().resolve().then(setTokenList);\n  }, [setTokenList]);\n\n  // Connect to the wallet.\n  useEffect(() => {\n    console.log(\"Token Lists\");\n    console.log(new TokenListProvider().resolve().then(setTokenList));\n    console.log(tezosTokens);\n    console.log(tezosTokens);\n\n    wallet.on(\"connect\", () => {\n      enqueueSnackbar(\"Wallet connected\", { variant: \"success\" });\n      setIsConnected(true);\n    });\n    wallet.on(\"disconnect\", () => {\n      enqueueSnackbar(\"Wallet disconnected\", { variant: \"info\" });\n      setIsConnected(false);\n    });\n  }, [wallet, enqueueSnackbar]);\n\n  return (\n    <Grid\n      container\n      justify=\"center\"\n      alignItems=\"center\"\n      className={styles.root}\n    >\n      <Button\n        variant=\"outlined\"\n        onClick={() => (!isConnected ? wallet.connect() : wallet.disconnect())}\n        style={{ position: \"fixed\", color: \"white\", right: 24, top: 24 }}\n      >\n        {!isConnected ? \"Connect\" : \"Disconnect\"}\n      </Button>\n      {tokenList && <Swap provider={provider} tokenList={tokenList} />}\n    </Grid>\n  );\n}\n\n// Cast wallet to AnchorWallet in order to be compatible with Anchor's Provider class\ninterface AnchorWallet {\n  signTransaction(tx: Transaction): Promise<Transaction>;\n  signAllTransactions(txs: Transaction[]): Promise<Transaction[]>;\n  publicKey: PublicKey;\n}\n\n// Custom provider to display notifications whenever a transaction is sent.\n//\n// Note that this is an Anchor wallet/network provider--not a React provider,\n// so all transactions will be flowing through here, which allows us to\n// hook in to display all transactions sent from the `Swap` component\n// as notifications in the parent app.\nclass NotifyingProvider extends Provider {\n  // Function to call whenever the provider sends a transaction;\n  private onTransaction: (\n    tx: TransactionSignature | undefined,\n    err?: Error\n  ) => void;\n\n  constructor(\n    connection: Connection,\n    wallet: Wallet,\n    opts: ConfirmOptions,\n    onTransaction: (tx: TransactionSignature | undefined, err?: Error) => void\n  ) {\n    const newWallet = wallet as AnchorWallet;\n    super(connection, newWallet, opts);\n    this.onTransaction = onTransaction;\n  }\n\n  async send(\n    tx: Transaction,\n    signers?: Array<Signer | undefined>,\n    opts?: ConfirmOptions\n  ): Promise<TransactionSignature> {\n    try {\n      const txSig = await super.send(tx, signers, opts);\n      this.onTransaction(txSig);\n      return txSig;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return \"\";\n    }\n  }\n\n  async sendAll(\n    txs: Array<{ tx: Transaction; signers: Array<Signer | undefined> }>,\n    opts?: ConfirmOptions\n  ): Promise<Array<TransactionSignature>> {\n    try {\n      const txSigs = await super.sendAll(txs, opts);\n      txSigs.forEach((sig) => {\n        this.onTransaction(sig);\n      });\n      return txSigs;\n    } catch (err) {\n      if (err instanceof Error || err === undefined) {\n        this.onTransaction(undefined, err);\n      }\n      return [];\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}