{"ast":null,"code":"import { fetch } from 'cross-fetch'; // import tokenlist from './../tokens/solana.tokenlist.json';\n\nimport tokenlist from './../tokens/tezos.tokenlist.json';\nexport var ENV;\n\n(function (ENV) {\n  ENV[ENV[\"MainnetBeta\"] = 101] = \"MainnetBeta\";\n  ENV[ENV[\"Testnet\"] = 102] = \"Testnet\";\n  ENV[ENV[\"Devnet\"] = 103] = \"Devnet\";\n})(ENV || (ENV = {}));\n\nexport const CLUSTER_SLUGS = {\n  'mainnet-beta': ENV.MainnetBeta,\n  testnet: ENV.Testnet,\n  devnet: ENV.Devnet\n};\nexport class GitHubTokenListResolutionStrategy {\n  constructor() {\n    this.repositories = [// 'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json',\n    'https://raw.githubusercontent.com/von-dee/swaptzstats/main/solana.tokenlist.json'];\n\n    this.resolve = () => {\n      return queryJsonFiles(this.repositories);\n    };\n\n    console.log(thisresolve);\n    console.log();\n  }\n\n}\nexport class CDNTokenListResolutionStrategy {\n  constructor() {\n    this.repositories = [// 'https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json',\n    'https://raw.githubusercontent.com/von-dee/swaptzstats/main/tezos.tokenlist.json'];\n\n    this.resolve = () => {\n      return queryJsonFiles(this.repositories);\n    };\n  }\n\n}\n\nconst queryJsonFiles = async files => {\n  const responses = await Promise.all(files.map(async repo => {\n    try {\n      const response = await fetch(repo);\n      const json = await response.json();\n      return json;\n    } catch {\n      console.info(`@solana/token-registry: falling back to static repository.`);\n      return tokenlist;\n    }\n  }));\n  return responses.map(tokenlist => tokenlist.tokens).reduce((acc, arr) => acc.concat(arr), []);\n};\n\nexport var Strategy;\n\n(function (Strategy) {\n  Strategy[\"GitHub\"] = \"GitHub\";\n  Strategy[\"Static\"] = \"Static\";\n  Strategy[\"Solana\"] = \"Solana\";\n  Strategy[\"CDN\"] = \"CDN\";\n})(Strategy || (Strategy = {}));\n\nexport class SolanaTokenListResolutionStrategy {\n  constructor() {\n    this.resolve = () => {\n      throw new Error(`Not Implemented Yet.`);\n    };\n  }\n\n}\nexport class StaticTokenListResolutionStrategy {\n  constructor() {\n    this.resolve = () => {\n      return tokenlist.tokens;\n    };\n  }\n\n}\nexport class TokenListProvider {\n  constructor() {\n    this.resolve = async (strategy = Strategy.CDN) => {\n      return new TokenListContainer(await TokenListProvider.strategies[strategy].resolve());\n    };\n  }\n\n}\nTokenListProvider.strategies = {\n  [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),\n  [Strategy.Static]: new StaticTokenListResolutionStrategy(),\n  [Strategy.Solana]: new SolanaTokenListResolutionStrategy(),\n  [Strategy.CDN]: new CDNTokenListResolutionStrategy()\n};\nexport class TokenListContainer {\n  constructor(tokenList) {\n    this.tokenList = tokenList;\n\n    this.filterByTag = tag => {\n      return new TokenListContainer(this.tokenList.filter(item => (item.tags || []).includes(tag)));\n    };\n\n    this.filterByChainId = chainId => {\n      return new TokenListContainer(this.tokenList.filter(item => item.chainId === chainId));\n    };\n\n    this.excludeByChainId = chainId => {\n      return new TokenListContainer(this.tokenList.filter(item => item.chainId !== chainId));\n    };\n\n    this.excludeByTag = tag => {\n      return new TokenListContainer(this.tokenList.filter(item => !(item.tags || []).includes(tag)));\n    };\n\n    this.filterByClusterSlug = slug => {\n      if (slug in CLUSTER_SLUGS) {\n        return this.filterByChainId(CLUSTER_SLUGS[slug]);\n      }\n\n      throw new Error(`Unknown slug: ${slug}, please use one of ${Object.keys(CLUSTER_SLUGS)}`);\n    };\n\n    this.getList = () => {\n      return this.tokenList;\n    };\n  }\n\n}","map":{"version":3,"sources":["../../../src/lib/tokenlist.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { fetch } from 'cross-fetch';\n\n// import tokenlist from './../tokens/solana.tokenlist.json';\nimport tokenlist from './../tokens/tezos.tokenlist.json';\n\nexport var ENV;\n(function (ENV) {\n    ENV[ENV[\"MainnetBeta\"] = 101] = \"MainnetBeta\";\n    ENV[ENV[\"Testnet\"] = 102] = \"Testnet\";\n    ENV[ENV[\"Devnet\"] = 103] = \"Devnet\";\n})(ENV || (ENV = {}));\nexport const CLUSTER_SLUGS = {\n    'mainnet-beta': ENV.MainnetBeta,\n    testnet: ENV.Testnet,\n    devnet: ENV.Devnet,\n};\nexport class GitHubTokenListResolutionStrategy {\n    constructor() {\n        this.repositories = [\n            // 'https://raw.githubusercontent.com/solana-labs/token-list/main/src/tokens/solana.tokenlist.json',\n            'https://raw.githubusercontent.com/von-dee/swaptzstats/main/solana.tokenlist.json',\n        ];\n        this.resolve = () => {\n            return queryJsonFiles(this.repositories);\n        };\n        \n        console.log(thisresolve);\n        console.log();\n    }\n}\nexport class CDNTokenListResolutionStrategy {\n    constructor() {\n        this.repositories = [\n            // 'https://cdn.jsdelivr.net/gh/solana-labs/token-list@main/src/tokens/solana.tokenlist.json',\n            'https://raw.githubusercontent.com/von-dee/swaptzstats/main/tezos.tokenlist.json',\n        ];\n        this.resolve = () => {\n            return queryJsonFiles(this.repositories);\n        };\n    }\n}\nconst queryJsonFiles = async (files) => {\n    const responses = (await Promise.all(files.map(async (repo) => {\n        try {\n            const response = await fetch(repo);\n            const json = (await response.json());\n            return json;\n        }\n        catch {\n            console.info(`@solana/token-registry: falling back to static repository.`);\n            return tokenlist;\n        }\n    })));\n    return responses\n        .map((tokenlist) => tokenlist.tokens)\n        .reduce((acc, arr) => acc.concat(arr), []);\n};\nexport var Strategy;\n(function (Strategy) {\n    Strategy[\"GitHub\"] = \"GitHub\";\n    Strategy[\"Static\"] = \"Static\";\n    Strategy[\"Solana\"] = \"Solana\";\n    Strategy[\"CDN\"] = \"CDN\";\n})(Strategy || (Strategy = {}));\nexport class SolanaTokenListResolutionStrategy {\n    constructor() {\n        this.resolve = () => {\n            throw new Error(`Not Implemented Yet.`);\n        };\n    }\n}\nexport class StaticTokenListResolutionStrategy {\n    constructor() {\n        this.resolve = () => {\n            return tokenlist.tokens;\n        };\n    }\n}\nexport class TokenListProvider {\n    constructor() {\n        this.resolve = async (strategy = Strategy.CDN) => {\n            return new TokenListContainer(await TokenListProvider.strategies[strategy].resolve());\n        };\n    }\n}\nTokenListProvider.strategies = {\n    [Strategy.GitHub]: new GitHubTokenListResolutionStrategy(),\n    [Strategy.Static]: new StaticTokenListResolutionStrategy(),\n    [Strategy.Solana]: new SolanaTokenListResolutionStrategy(),\n    [Strategy.CDN]: new CDNTokenListResolutionStrategy(),\n};\nexport class TokenListContainer {\n    constructor(tokenList) {\n        this.tokenList = tokenList;\n        this.filterByTag = (tag) => {\n            return new TokenListContainer(this.tokenList.filter((item) => (item.tags || []).includes(tag)));\n        };\n        this.filterByChainId = (chainId) => {\n            return new TokenListContainer(this.tokenList.filter((item) => item.chainId === chainId));\n        };\n        this.excludeByChainId = (chainId) => {\n            return new TokenListContainer(this.tokenList.filter((item) => item.chainId !== chainId));\n        };\n        this.excludeByTag = (tag) => {\n            return new TokenListContainer(this.tokenList.filter((item) => !(item.tags || []).includes(tag)));\n        };\n        this.filterByClusterSlug = (slug) => {\n            if (slug in CLUSTER_SLUGS) {\n                return this.filterByChainId(CLUSTER_SLUGS[slug]);\n            }\n            throw new Error(`Unknown slug: ${slug}, please use one of ${Object.keys(CLUSTER_SLUGS)}`);\n        };\n        this.getList = () => {\n            return this.tokenList;\n        };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5saXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90b2tlbmxpc3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUVwQyxPQUFPLFNBQVMsTUFBTSxtQ0FBbUMsQ0FBQztBQUUxRCxNQUFNLENBQU4sSUFBWSxHQUlYO0FBSkQsV0FBWSxHQUFHO0lBQ2IsNkNBQWlCLENBQUE7SUFDakIscUNBQWEsQ0FBQTtJQUNiLG1DQUFZLENBQUE7QUFDZCxDQUFDLEVBSlcsR0FBRyxLQUFILEdBQUcsUUFJZDtBQStDRCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQTBCO0lBQ2xELGNBQWMsRUFBRSxHQUFHLENBQUMsV0FBVztJQUMvQixPQUFPLEVBQUUsR0FBRyxDQUFDLE9BQU87SUFDcEIsTUFBTSxFQUFFLEdBQUcsQ0FBQyxNQUFNO0NBQ25CLENBQUM7QUFFRixNQUFNLE9BQU8saUNBQWlDO0lBQTlDO1FBQ0UsaUJBQVksR0FBRztZQUNiLGdHQUFnRztTQUNqRyxDQUFDO1FBRUYsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNiLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUFFRCxNQUFNLE9BQU8sOEJBQThCO0lBQTNDO1FBQ0UsaUJBQVksR0FBRztZQUNiLDBGQUEwRjtTQUMzRixDQUFDO1FBRUYsWUFBTyxHQUFHLEdBQUcsRUFBRTtZQUNiLE9BQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMzQyxDQUFDLENBQUM7SUFDSixDQUFDO0NBQUE7QUFFRCxNQUFNLGNBQWMsR0FBRyxLQUFLLEVBQUUsS0FBZSxFQUFFLEVBQUU7SUFDL0MsTUFBTSxTQUFTLEdBQWdCLENBQUMsTUFBTSxPQUFPLENBQUMsR0FBRyxDQUMvQyxLQUFLLENBQUMsR0FB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"]},"metadata":{},"sourceType":"module"}