{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getAssociatedTokenAddress = exports.getVaultOwnerAndNonce = exports.USDT_PUBKEY = exports.USDC_PUBKEY = exports.SWAP_PID = exports.DEX_PID = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst web3_js_1 = require(\"@solana/web3.js\"); // Serum DEX program id on mainnet-beta.\n\n\nexports.DEX_PID = new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin'); // Swap program id on mainnet-beta.\n\nexports.SWAP_PID = new web3_js_1.PublicKey('22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD'); // USDC mint on mainnet-beta.\n\nexports.USDC_PUBKEY = new web3_js_1.PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v'); // USDT mint on mainnet-beta.\n\nexports.USDT_PUBKEY = new web3_js_1.PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB'); // Return the program derived address used by the serum DEX to control token\n// vaults.\n\nasync function getVaultOwnerAndNonce(marketPublicKey, dexProgramId = exports.DEX_PID) {\n  const nonce = new bn_js_1.default(0);\n\n  while (nonce.toNumber() < 255) {\n    try {\n      const vaultOwner = await web3_js_1.PublicKey.createProgramAddress([marketPublicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)], dexProgramId);\n      return [vaultOwner, nonce];\n    } catch (e) {\n      nonce.iaddn(1);\n    }\n  }\n\n  throw new Error('Unable to find nonce');\n}\n\nexports.getVaultOwnerAndNonce = getVaultOwnerAndNonce; // Returns an associated token address for spl tokens.\n\nasync function getAssociatedTokenAddress(associatedProgramId, programId, mint, owner) {\n  return (await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedProgramId))[0];\n}\n\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,MAAA,SAAA,GAAA,OAAA,CAAA,iBAAA,CAAA,C,CAEA;;;AACa,OAAA,CAAA,OAAA,GAAU,IAAI,SAAA,CAAA,SAAJ,CACrB,8CADqB,CAAV,C,CAIb;;AACa,OAAA,CAAA,QAAA,GAAW,IAAI,SAAA,CAAA,SAAJ,CACtB,8CADsB,CAAX,C,CAIb;;AACa,OAAA,CAAA,WAAA,GAAc,IAAI,SAAA,CAAA,SAAJ,CACzB,8CADyB,CAAd,C,CAIb;;AACa,OAAA,CAAA,WAAA,GAAc,IAAI,SAAA,CAAA,SAAJ,CACzB,8CADyB,CAAd,C,CAIb;AACA;;AACO,eAAe,qBAAf,CACL,eADK,EAEL,YAAA,GAA0B,OAAA,CAAA,OAFrB,EAE4B;AAEjC,QAAM,KAAK,GAAG,IAAI,OAAA,CAAA,OAAJ,CAAO,CAAP,CAAd;;AACA,SAAO,KAAK,CAAC,QAAN,KAAmB,GAA1B,EAA+B;AAC7B,QAAI;AACF,YAAM,UAAU,GAAG,MAAM,SAAA,CAAA,SAAA,CAAU,oBAAV,CACvB,CAAC,eAAe,CAAC,QAAhB,EAAD,EAA6B,KAAK,CAAC,WAAN,CAAkB,MAAlB,EAA0B,IAA1B,EAAgC,CAAhC,CAA7B,CADuB,EAEvB,YAFuB,CAAzB;AAIA,aAAO,CAAC,UAAD,EAAa,KAAb,CAAP;AACD,KAND,CAME,OAAO,CAAP,EAAU;AACV,MAAA,KAAK,CAAC,KAAN,CAAY,CAAZ;AACD;AACF;;AACD,QAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AAjBD,OAAA,CAAA,qBAAA,GAAA,qBAAA,C,CAmBA;;AACO,eAAe,yBAAf,CACL,mBADK,EAEL,SAFK,EAGL,IAHK,EAIL,KAJK,EAIW;AAEhB,SAAO,CACL,MAAM,SAAA,CAAA,SAAA,CAAU,kBAAV,CACJ,CAAC,KAAK,CAAC,QAAN,EAAD,EAAmB,SAAS,CAAC,QAAV,EAAnB,EAAyC,IAAI,CAAC,QAAL,EAAzC,CADI,EAEJ,mBAFI,CADD,EAKL,CALK,CAAP;AAMD;;AAZD,OAAA,CAAA,yBAAA,GAAA,yBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getAssociatedTokenAddress = exports.getVaultOwnerAndNonce = exports.USDT_PUBKEY = exports.USDC_PUBKEY = exports.SWAP_PID = exports.DEX_PID = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\n// Serum DEX program id on mainnet-beta.\nexports.DEX_PID = new web3_js_1.PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n// Swap program id on mainnet-beta.\nexports.SWAP_PID = new web3_js_1.PublicKey('22Y43yTVxuUkoRKdm9thyRhQ3SdgQS7c7kB6UNCiaczD');\n// USDC mint on mainnet-beta.\nexports.USDC_PUBKEY = new web3_js_1.PublicKey('EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v');\n// USDT mint on mainnet-beta.\nexports.USDT_PUBKEY = new web3_js_1.PublicKey('Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB');\n// Return the program derived address used by the serum DEX to control token\n// vaults.\nasync function getVaultOwnerAndNonce(marketPublicKey, dexProgramId = exports.DEX_PID) {\n    const nonce = new bn_js_1.default(0);\n    while (nonce.toNumber() < 255) {\n        try {\n            const vaultOwner = await web3_js_1.PublicKey.createProgramAddress([marketPublicKey.toBuffer(), nonce.toArrayLike(Buffer, 'le', 8)], dexProgramId);\n            return [vaultOwner, nonce];\n        }\n        catch (e) {\n            nonce.iaddn(1);\n        }\n    }\n    throw new Error('Unable to find nonce');\n}\nexports.getVaultOwnerAndNonce = getVaultOwnerAndNonce;\n// Returns an associated token address for spl tokens.\nasync function getAssociatedTokenAddress(associatedProgramId, programId, mint, owner) {\n    return (await web3_js_1.PublicKey.findProgramAddress([owner.toBuffer(), programId.toBuffer(), mint.toBuffer()], associatedProgramId))[0];\n}\nexports.getAssociatedTokenAddress = getAssociatedTokenAddress;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}